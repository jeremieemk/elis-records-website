{"version":3,"file":"static/webpack/static/development/pages/index.js.faca7bdd9d8b5ce34a32.hot-update.js","sources":["webpack:///./components/AudioPlayer.js","webpack:///./components/ProgressBar.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\nimport VolumeSlider from \"./VolumeSlider\";\nimport Loader from \"./Loader\";\n\nfunction AudioPlayer(props) {\n  const [progression, setProgression] = useState(0);\n  const audio = useRef();\n  const updateProgress = () =>\n    setProgression((audio.current.currentTime / audio.current.duration) * 100);\n  useEffect(() => {\n    props.playingStatus ? audio.current.play() : audio.current.pause();\n  }, [props.playingStatus]);\n\n  // allows launching track when clicking on the tracklist\n  useEffect(() => {\n    props.setPlayingStatus(true);\n    audio.current.currentTime = 0;\n    audio.current.play();\n  }, [props.launchPlay, props.track]);\n\n  return (\n    <div>\n      {!(audio.current && audio.current.currentTime > 0) ? (\n        <div className=\"loader-container\">\n          <Loader size=\"37\" />\n        </div>\n      ) : (\n        <div className=\"player-loaded\">\n          <div className=\"audio-player-container\">\n            <PlayButton\n              handlePlayButtonClick={props.handlePlayButtonClick}\n              playingStatus={props.playingStatus}\n            />\n            <ProgressBar audio={audio.current} progression={progression} />\n          </div>\n          <VolumeSlider audio={audio.current} />\n        </div>\n      )}\n      <audio ref={audio} onTimeUpdate={updateProgress} src={props.track.url} />\n\n      <style jsx>{`\n        .audio-player-container {\n          z-index: 5;\n          position: relative;\n          display: flex;\n          width: 100%;\n          height: 2rem;\n          animation: fadeIn 1s;\n          animation-fill-mode: forwards;\n        }\n        .loader-container {\n          padding-bottom: 1rem;\n        }\n\n        @keyframes fadeIn {\n          from {\n            opacity: 0;\n          }\n\n          to {\n            opacity: 1;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default AudioPlayer;\n","import { useRef } from \"react\";\n\nfunction ProgressBar(props) {\n  const progressBar = useRef();\n  function scrub(e) {\n    if (props.audio) {\n      const scrubTime =\n        (e.nativeEvent.offsetX / progressBar.current.offsetWidth) *\n        props.audio.duration;\n      props.audio.currentTime = scrubTime;\n    }\n  }\n\n  return (\n    <div className=\"progress-bar\" ref={progressBar} onClick={scrub}>\n      <div className=\"range\" style={{ width: `${props.progression}%` }} />\n      <style jsx>{`\n        .progress-bar {\n          width: 100%;\n          height: 100%;\n          margin-left: 0.5rem;\n          margin-right: 1rem;\n          border: 1px solid black;\n          transition: opacity 0.6s;\n        }\n        .progress-bar:hover {\n          opacity: 0.8;\n        }\n        .range {\n          background: black;\n          height: 100%;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default ProgressBar;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AA6CA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;;;;A","sourceRoot":""}