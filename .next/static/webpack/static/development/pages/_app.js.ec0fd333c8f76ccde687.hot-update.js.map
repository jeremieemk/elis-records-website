{"version":3,"file":"static/webpack/static/development/pages/_app.js.ec0fd333c8f76ccde687.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import Prismic from \"prismic-javascript\";\nimport { useEffect, useState } from \"react\";\n\nfunction App({ Component, pageProps }) {\n  console.log(\"test\");\n  const [releases, setReleasesData] = useState(null);\n  const [dataIsLoaded, setDataIsLoaded] = useState(false);\n  const apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n  const accessToken = \"\";\n  const Client = Prismic.client(apiEndpoint, { accessToken });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(\n        Prismic.Predicates.at(\"document.type\", \"release\"),\n        { orderings: \"[my.release.release-date desc]\" }\n      );\n      if (response) {\n        setReleasesData(response.results);\n        setDataIsLoaded(true);\n      }\n    };\n    fetchData();\n  }, []);\n  return <Component releases={releases} dataIsLoaded={dataIsLoaded} />;\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default App;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAJA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}