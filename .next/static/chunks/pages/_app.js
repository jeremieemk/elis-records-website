/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
  \*******************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfYXBwJnBhZ2U9JTJGX2FwcCEiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxnREFBeUI7QUFDaEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzY3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prismic_javascript__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismic-javascript */ \"./node_modules/prismic-javascript/esm/prismic-javascript.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _s = $RefreshSig$();\n\n\nfunction App(param) {\n    let { Component, pageProps } = param;\n    _s();\n    const [releases, setReleasesData] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [dataIsLoaded, setDataIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n    const accessToken = \"\";\n    const Client = prismic_javascript__WEBPACK_IMPORTED_MODULE_1__[\"default\"].client(apiEndpoint, {\n        accessToken\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const fetchData = async ()=>{\n            const response = await Client.query(prismic_javascript__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Predicates.at(\"document.type\", \"release\"), {\n                orderings: \"[my.release.release-date desc]\"\n            });\n            if (response) {\n                setReleasesData(response.results);\n                setDataIsLoaded(true);\n            }\n        };\n        fetchData();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n        releases: releases,\n        dataIsLoaded: dataIsLoaded\n    }, void 0, false, {\n        fileName: \"/Users/jeremie/code/elis-records-website/pages/_app.js\",\n        lineNumber: 23,\n        columnNumber: 10\n    }, this);\n}\n_s(App, \"GsFBacMT9B7QsfdAFdhcbL2KGqA=\");\n_c = App;\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n/* harmony default export */ __webpack_exports__[\"default\"] = (App);\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDO0FBQ0c7QUFFNUMsU0FBU0csSUFBSSxLQUF3QjtRQUF4QixFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRSxHQUF4Qjs7SUFDWCxNQUFNLENBQUNDLFVBQVVDLGdCQUFnQixHQUFHTCwrQ0FBUUEsQ0FBQztJQUM3QyxNQUFNLENBQUNNLGNBQWNDLGdCQUFnQixHQUFHUCwrQ0FBUUEsQ0FBQztJQUNqRCxNQUFNUSxjQUFjO0lBQ3BCLE1BQU1DLGNBQWM7SUFDcEIsTUFBTUMsU0FBU1osaUVBQWMsQ0FBQ1UsYUFBYTtRQUFFQztJQUFZO0lBQ3pEVixnREFBU0EsQ0FBQztRQUNSLE1BQU1hLFlBQVk7WUFDaEIsTUFBTUMsV0FBVyxNQUFNSCxPQUFPSSxLQUFLLENBQ2pDaEIscUVBQWtCLENBQUNrQixFQUFFLENBQUMsaUJBQWlCLFlBQ3ZDO2dCQUFFQyxXQUFXO1lBQWlDO1lBRWhELElBQUlKLFVBQVU7Z0JBQ1pSLGdCQUFnQlEsU0FBU0ssT0FBTztnQkFDaENYLGdCQUFnQjtZQUNsQjtRQUNGO1FBQ0FLO0lBQ0YsR0FBRyxFQUFFO0lBQ0wscUJBQU8sOERBQUNWO1FBQVVFLFVBQVVBO1FBQVVFLGNBQWNBOzs7Ozs7QUFDdEQ7R0FwQlNMO0tBQUFBO0FBc0JULHdFQUF3RTtBQUN4RSxzRUFBc0U7QUFDdEUsMkVBQTJFO0FBQzNFLDJCQUEyQjtBQUMzQixFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELHFFQUFxRTtBQUNyRSw0REFBNEQ7QUFDNUQsRUFBRTtBQUNGLDJCQUEyQjtBQUMzQixJQUFJO0FBRUosK0RBQWVBLEdBQUdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvX2FwcC5qcz9lMGFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcmlzbWljIGZyb20gXCJwcmlzbWljLWphdmFzY3JpcHRcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gQXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xuICBjb25zdCBbcmVsZWFzZXMsIHNldFJlbGVhc2VzRGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2RhdGFJc0xvYWRlZCwgc2V0RGF0YUlzTG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgYXBpRW5kcG9pbnQgPSBcImh0dHBzOi8vZWxpcy1yZWNvcmRzLnByaXNtaWMuaW8vYXBpL3YyXCI7XG4gIGNvbnN0IGFjY2Vzc1Rva2VuID0gXCJcIjtcbiAgY29uc3QgQ2xpZW50ID0gUHJpc21pYy5jbGllbnQoYXBpRW5kcG9pbnQsIHsgYWNjZXNzVG9rZW4gfSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBDbGllbnQucXVlcnkoXG4gICAgICAgIFByaXNtaWMuUHJlZGljYXRlcy5hdChcImRvY3VtZW50LnR5cGVcIiwgXCJyZWxlYXNlXCIpLFxuICAgICAgICB7IG9yZGVyaW5nczogXCJbbXkucmVsZWFzZS5yZWxlYXNlLWRhdGUgZGVzY11cIiB9XG4gICAgICApO1xuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHNldFJlbGVhc2VzRGF0YShyZXNwb25zZS5yZXN1bHRzKTtcbiAgICAgICAgc2V0RGF0YUlzTG9hZGVkKHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgZmV0Y2hEYXRhKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIDxDb21wb25lbnQgcmVsZWFzZXM9e3JlbGVhc2VzfSBkYXRhSXNMb2FkZWQ9e2RhdGFJc0xvYWRlZH0gLz47XG59XG5cbi8vIE9ubHkgdW5jb21tZW50IHRoaXMgbWV0aG9kIGlmIHlvdSBoYXZlIGJsb2NraW5nIGRhdGEgcmVxdWlyZW1lbnRzIGZvclxuLy8gZXZlcnkgc2luZ2xlIHBhZ2UgaW4geW91ciBhcHBsaWNhdGlvbi4gVGhpcyBkaXNhYmxlcyB0aGUgYWJpbGl0eSB0b1xuLy8gcGVyZm9ybSBhdXRvbWF0aWMgc3RhdGljIG9wdGltaXphdGlvbiwgY2F1c2luZyBldmVyeSBwYWdlIGluIHlvdXIgYXBwIHRvXG4vLyBiZSBzZXJ2ZXItc2lkZSByZW5kZXJlZC5cbi8vXG4vLyBNeUFwcC5nZXRJbml0aWFsUHJvcHMgPSBhc3luYyAoYXBwQ29udGV4dCkgPT4ge1xuLy8gICAvLyBjYWxscyBwYWdlJ3MgYGdldEluaXRpYWxQcm9wc2AgYW5kIGZpbGxzIGBhcHBQcm9wcy5wYWdlUHJvcHNgXG4vLyAgIGNvbnN0IGFwcFByb3BzID0gYXdhaXQgQXBwLmdldEluaXRpYWxQcm9wcyhhcHBDb250ZXh0KTtcbi8vXG4vLyAgIHJldHVybiB7IC4uLmFwcFByb3BzIH1cbi8vIH1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl0sIm5hbWVzIjpbIlByaXNtaWMiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIkFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsInJlbGVhc2VzIiwic2V0UmVsZWFzZXNEYXRhIiwiZGF0YUlzTG9hZGVkIiwic2V0RGF0YUlzTG9hZGVkIiwiYXBpRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbiIsIkNsaWVudCIsImNsaWVudCIsImZldGNoRGF0YSIsInJlc3BvbnNlIiwicXVlcnkiLCJQcmVkaWNhdGVzIiwiYXQiLCJvcmRlcmluZ3MiLCJyZXN1bHRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/_app.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "./node_modules/prismic-javascript/esm/prismic-javascript.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/prismic-javascript/esm/prismic-javascript.mjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar Variation = /** @class */ (function () {\n    function Variation(data) {\n        this.data = {};\n        this.data = data;\n    }\n    Variation.prototype.id = function () {\n        return this.data.id;\n    };\n    Variation.prototype.ref = function () {\n        return this.data.ref;\n    };\n    Variation.prototype.label = function () {\n        return this.data.label;\n    };\n    return Variation;\n}());\nvar Experiment = /** @class */ (function () {\n    function Experiment(data) {\n        this.data = {};\n        this.data = data;\n        this.variations = (data.variations || []).map(function (v) {\n            return new Variation(v);\n        });\n    }\n    Experiment.prototype.id = function () {\n        return this.data.id;\n    };\n    Experiment.prototype.googleId = function () {\n        return this.data.googleId;\n    };\n    Experiment.prototype.name = function () {\n        return this.data.name;\n    };\n    return Experiment;\n}());\nvar Experiments = /** @class */ (function () {\n    function Experiments(data) {\n        if (data) {\n            this.drafts = (data.drafts || []).map(function (exp) {\n                return new Experiment(exp);\n            });\n            this.running = (data.running || []).map(function (exp) {\n                return new Experiment(exp);\n            });\n        }\n    }\n    Experiments.prototype.current = function () {\n        if (this.running.length > 0) {\n            return this.running[0];\n        }\n        else {\n            return null;\n        }\n    };\n    Experiments.prototype.refFromCookie = function (cookie) {\n        if (!cookie || cookie.trim() === '')\n            return null;\n        var splitted = cookie.trim().split(' ');\n        if (splitted.length < 2)\n            return null;\n        var expId = splitted[0];\n        var varIndex = parseInt(splitted[1], 10);\n        var exp = this.running.filter(function (exp) {\n            return exp.googleId() === expId && exp.variations.length > varIndex;\n        })[0];\n        return exp ? exp.variations[varIndex].ref() : null;\n    };\n    return Experiments;\n}());\n\nvar LazySearchForm = /** @class */ (function () {\n    function LazySearchForm(id, api) {\n        this.id = id;\n        this.api = api;\n        this.fields = {};\n    }\n    LazySearchForm.prototype.set = function (key, value) {\n        this.fields[key] = value;\n        return this;\n    };\n    LazySearchForm.prototype.ref = function (ref) {\n        return this.set('ref', ref);\n    };\n    LazySearchForm.prototype.query = function (query) {\n        return this.set('q', query);\n    };\n    LazySearchForm.prototype.pageSize = function (size) {\n        return this.set('pageSize', size);\n    };\n    LazySearchForm.prototype.fetch = function (fields) {\n        console.warn('Warning: Using Fetch is deprecated. Use the property `graphQuery` instead.');\n        return this.set('fetch', fields);\n    };\n    LazySearchForm.prototype.fetchLinks = function (fields) {\n        console.warn('Warning: Using FetchLinks is deprecated. Use the property `graphQuery` instead.');\n        return this.set('fetchLinks', fields);\n    };\n    LazySearchForm.prototype.graphQuery = function (query) {\n        return this.set('graphQuery', query);\n    };\n    LazySearchForm.prototype.lang = function (langCode) {\n        return this.set('lang', langCode);\n    };\n    LazySearchForm.prototype.page = function (p) {\n        return this.set('page', p);\n    };\n    LazySearchForm.prototype.after = function (documentId) {\n        return this.set('after', documentId);\n    };\n    LazySearchForm.prototype.orderings = function (orderings) {\n        return this.set('orderings', orderings);\n    };\n    LazySearchForm.prototype.url = function () {\n        var _this = this;\n        return this.api.get().then(function (api) {\n            return LazySearchForm.toSearchForm(_this, api).url();\n        });\n    };\n    LazySearchForm.prototype.submit = function (cb) {\n        var _this = this;\n        return this.api.get().then(function (api) {\n            return LazySearchForm.toSearchForm(_this, api).submit(cb);\n        });\n    };\n    LazySearchForm.toSearchForm = function (lazyForm, api) {\n        var form = api.form(lazyForm.id);\n        if (form) {\n            return Object.keys(lazyForm.fields).reduce(function (form, fieldKey) {\n                var fieldValue = lazyForm.fields[fieldKey];\n                if (fieldKey === 'q') {\n                    return form.query(fieldValue);\n                }\n                else if (fieldKey === 'pageSize') {\n                    return form.pageSize(fieldValue);\n                }\n                else if (fieldKey === 'fetch') {\n                    return form.fetch(fieldValue);\n                }\n                else if (fieldKey === 'fetchLinks') {\n                    return form.fetchLinks(fieldValue);\n                }\n                else if (fieldKey === 'graphQuery') {\n                    return form.graphQuery(fieldValue);\n                }\n                else if (fieldKey === 'lang') {\n                    return form.lang(fieldValue);\n                }\n                else if (fieldKey === 'page') {\n                    return form.page(fieldValue);\n                }\n                else if (fieldKey === 'after') {\n                    return form.after(fieldValue);\n                }\n                else if (fieldKey === 'orderings') {\n                    return form.orderings(fieldValue);\n                }\n                else {\n                    return form.set(fieldKey, fieldValue);\n                }\n            }, form);\n        }\n        else {\n            throw new Error(\"Unable to access to form \" + lazyForm.id);\n        }\n    };\n    return LazySearchForm;\n}());\nvar SearchForm = /** @class */ (function () {\n    function SearchForm(form, httpClient) {\n        this.httpClient = httpClient;\n        this.form = form;\n        this.data = {};\n        for (var field in form.fields) {\n            if (form.fields[field]['default']) {\n                this.data[field] = [form.fields[field]['default']];\n            }\n        }\n    }\n    SearchForm.prototype.set = function (field, value) {\n        var fieldDesc = this.form.fields[field];\n        if (!fieldDesc)\n            throw new Error('Unknown field ' + field);\n        var checkedValue = value === '' || value === undefined ? null : value;\n        var values = this.data[field] || [];\n        if (fieldDesc.multiple) {\n            values = checkedValue ? values.concat([checkedValue]) : values;\n        }\n        else {\n            values = checkedValue ? [checkedValue] : values;\n        }\n        this.data[field] = values;\n        return this;\n    };\n    /**\n     * Sets a ref to query on for this SearchForm. This is a mandatory\n     * method to call before calling submit(), and api.form('everything').submit()\n     * will not work.\n     */\n    SearchForm.prototype.ref = function (ref) {\n        return this.set('ref', ref);\n    };\n    /**\n     * Sets a predicate-based query for this SearchForm. This is where you\n     * paste what you compose in your prismic.io API browser.\n     */\n    SearchForm.prototype.query = function (query) {\n        if (typeof query === 'string') {\n            return this.query([query]);\n        }\n        else if (Array.isArray(query)) {\n            return this.set('q', \"[\" + query.join('') + \"]\");\n        }\n        else {\n            throw new Error(\"Invalid query : \" + query);\n        }\n    };\n    /**\n     * Sets a page size to query for this SearchForm. This is an optional method.\n     *\n     * @param {number} size - The page size\n     * @returns {SearchForm} - The SearchForm itself\n     */\n    SearchForm.prototype.pageSize = function (size) {\n        return this.set('pageSize', size);\n    };\n    /**\n     * Restrict the results document to the specified fields\n     */\n    SearchForm.prototype.fetch = function (fields) {\n        console.warn('Warning: Using Fetch is deprecated. Use the property `graphQuery` instead.');\n        var strFields = Array.isArray(fields) ? fields.join(',') : fields;\n        return this.set('fetch', strFields);\n    };\n    /**\n     * Include the requested fields in the DocumentLink instances in the result\n     */\n    SearchForm.prototype.fetchLinks = function (fields) {\n        console.warn('Warning: Using FetchLinks is deprecated. Use the property `graphQuery` instead.');\n        var strFields = Array.isArray(fields) ? fields.join(',') : fields;\n        return this.set('fetchLinks', strFields);\n    };\n    /**\n     * Sets the graphquery to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.graphQuery = function (query) {\n        return this.set('graphQuery', query);\n    };\n    /**\n     * Sets the language to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.lang = function (langCode) {\n        return this.set('lang', langCode);\n    };\n    /**\n     * Sets the page number to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.page = function (p) {\n        return this.set('page', p);\n    };\n    /**\n     * Remove all the documents except for those after the specified document in the list. This is an optional method.\n     */\n    SearchForm.prototype.after = function (documentId) {\n        return this.set('after', documentId);\n    };\n    /**\n     * Sets the orderings to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.orderings = function (orderings) {\n        if (!orderings) {\n            return this;\n        }\n        else {\n            return this.set('orderings', \"[\" + orderings.join(',') + \"]\");\n        }\n    };\n    /**\n     * Build the URL to query\n     */\n    SearchForm.prototype.url = function () {\n        var url = this.form.action;\n        if (this.data) {\n            var sep = (url.indexOf('?') > -1 ? '&' : '?');\n            for (var key in this.data) {\n                if (Object.prototype.hasOwnProperty.call(this.data, key)) {\n                    var values = this.data[key];\n                    if (values) {\n                        for (var i = 0; i < values.length; i++) {\n                            url += sep + key + '=' + encodeURIComponent(values[i]);\n                            sep = '&';\n                        }\n                    }\n                }\n            }\n        }\n        return url;\n    };\n    /**\n     * Submits the query, and calls the callback function.\n     */\n    SearchForm.prototype.submit = function (cb) {\n        return this.httpClient.cachedRequest(this.url()).then(function (response) {\n            cb && cb(null, response);\n            return response;\n        }).catch(function (error) {\n            cb && cb(error);\n            throw error;\n        });\n    };\n    return SearchForm;\n}());\n\nvar OPERATOR = {\n    at: 'at',\n    not: 'not',\n    missing: 'missing',\n    has: 'has',\n    any: 'any',\n    in: 'in',\n    fulltext: 'fulltext',\n    similar: 'similar',\n    numberGt: 'number.gt',\n    numberLt: 'number.lt',\n    numberInRange: 'number.inRange',\n    dateBefore: 'date.before',\n    dateAfter: 'date.after',\n    dateBetween: 'date.between',\n    dateDayOfMonth: 'date.day-of-month',\n    dateDayOfMonthAfter: 'date.day-of-month-after',\n    dateDayOfMonthBefore: 'date.day-of-month-before',\n    dateDayOfWeek: 'date.day-of-week',\n    dateDayOfWeekAfter: 'date.day-of-week-after',\n    dateDayOfWeekBefore: 'date.day-of-week-before',\n    dateMonth: 'date.month',\n    dateMonthBefore: 'date.month-before',\n    dateMonthAfter: 'date.month-after',\n    dateYear: 'date.year',\n    dateHour: 'date.hour',\n    dateHourBefore: 'date.hour-before',\n    dateHourAfter: 'date.hour-after',\n    GeopointNear: 'geopoint.near',\n};\nfunction encode(value) {\n    if (typeof value === 'string') {\n        return \"\\\"\" + value + \"\\\"\";\n    }\n    else if (typeof value === 'number') {\n        return value.toString();\n    }\n    else if (value instanceof Date) {\n        return value.getTime().toString();\n    }\n    else if (Array.isArray(value)) {\n        return \"[\" + value.map(function (v) { return encode(v); }).join(',') + \"]\";\n    }\n    else if (typeof value === \"boolean\") {\n        return value.toString();\n    }\n    else {\n        throw new Error(\"Unable to encode \" + value + \" of type \" + typeof value);\n    }\n}\nvar geopoint = {\n    near: function (fragment, latitude, longitude, radius) {\n        return \"[\" + OPERATOR.GeopointNear + \"(\" + fragment + \", \" + latitude + \", \" + longitude + \", \" + radius + \")]\";\n    },\n};\nvar date = {\n    before: function (fragment, before) {\n        return \"[\" + OPERATOR.dateBefore + \"(\" + fragment + \", \" + encode(before) + \")]\";\n    },\n    after: function (fragment, after) {\n        return \"[\" + OPERATOR.dateAfter + \"(\" + fragment + \", \" + encode(after) + \")]\";\n    },\n    between: function (fragment, before, after) {\n        return \"[\" + OPERATOR.dateBetween + \"(\" + fragment + \", \" + encode(before) + \", \" + encode(after) + \")]\";\n    },\n    dayOfMonth: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonth + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfMonthAfter: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonthAfter + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfMonthBefore: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonthBefore + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfWeek: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeek + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    dayOfWeekAfter: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeekAfter + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    dayOfWeekBefore: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeekBefore + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    month: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonth + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    monthBefore: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonthBefore + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    monthAfter: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonthAfter + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    year: function (fragment, year) {\n        return \"[\" + OPERATOR.dateYear + \"(\" + fragment + \", \" + year + \")]\";\n    },\n    hour: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHour + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n    hourBefore: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHourBefore + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n    hourAfter: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHourAfter + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n};\nvar number = {\n    gt: function (fragment, value) {\n        return \"[\" + OPERATOR.numberGt + \"(\" + fragment + \", \" + value + \")]\";\n    },\n    lt: function (fragment, value) {\n        return \"[\" + OPERATOR.numberLt + \"(\" + fragment + \", \" + value + \")]\";\n    },\n    inRange: function (fragment, before, after) {\n        return \"[\" + OPERATOR.numberInRange + \"(\" + fragment + \", \" + before + \", \" + after + \")]\";\n    },\n};\nvar Predicates = {\n    at: function (fragment, value) {\n        return \"[\" + OPERATOR.at + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    not: function (fragment, value) {\n        return \"[\" + OPERATOR.not + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    missing: function (fragment) {\n        return \"[\" + OPERATOR.missing + \"(\" + fragment + \")]\";\n    },\n    has: function (fragment) {\n        return \"[\" + OPERATOR.has + \"(\" + fragment + \")]\";\n    },\n    any: function (fragment, values) {\n        return \"[\" + OPERATOR.any + \"(\" + fragment + \", \" + encode(values) + \")]\";\n    },\n    in: function (fragment, values) {\n        return \"[\" + OPERATOR.in + \"(\" + fragment + \", \" + encode(values) + \")]\";\n    },\n    fulltext: function (fragment, value) {\n        return \"[\" + OPERATOR.fulltext + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    similar: function (documentId, maxResults) {\n        return \"[\" + OPERATOR.similar + \"(\\\"\" + documentId + \"\\\", \" + maxResults + \")]\";\n    },\n    date: date,\n    dateBefore: date.before,\n    dateAfter: date.after,\n    dateBetween: date.between,\n    dayOfMonth: date.dayOfMonth,\n    dayOfMonthAfter: date.dayOfMonthAfter,\n    dayOfMonthBefore: date.dayOfMonthBefore,\n    dayOfWeek: date.dayOfWeek,\n    dayOfWeekAfter: date.dayOfWeekAfter,\n    dayOfWeekBefore: date.dayOfWeekBefore,\n    month: date.month,\n    monthBefore: date.monthBefore,\n    monthAfter: date.monthAfter,\n    year: date.year,\n    hour: date.hour,\n    hourBefore: date.hourBefore,\n    hourAfter: date.hourAfter,\n    number: number,\n    gt: number.gt,\n    lt: number.lt,\n    inRange: number.inRange,\n    near: geopoint.near,\n    geopoint: geopoint,\n};\n\n/* eslint-disable */\n// Some portions of code from https://github.com/jshttp/cookie\nvar decode = decodeURIComponent;\nfunction tryDecode(str, decode) {\n    try {\n        return decode(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\nfunction parse(str, options) {\n    if (typeof str !== 'string') {\n        throw new TypeError('argument str must be a string');\n    }\n    var obj = {};\n    var opt = options || {};\n    var pairs = str.split(/; */);\n    var dec = opt.decode || decode;\n    pairs.forEach(function (pair) {\n        var eq_idx = pair.indexOf('=');\n        // skip things that don't look like key=value\n        if (eq_idx < 0) {\n            return;\n        }\n        var key = pair.substr(0, eq_idx).trim();\n        var val = pair.substr(++eq_idx, pair.length).trim();\n        // quoted values\n        if ('\"' == val[0]) {\n            val = val.slice(1, -1);\n        }\n        // only assign once\n        if (undefined == obj[key]) {\n            obj[key] = tryDecode(val, dec);\n        }\n    });\n    return obj;\n}\nvar Cookies = { parse: parse };\n\nfunction createPreviewResolver(token, documentId, getDocByID) {\n    var resolve = function (linkResolver, defaultUrl, cb) {\n        if (documentId && getDocByID) {\n            return getDocByID(documentId, { ref: token }).then(function (document) {\n                if (!document) {\n                    cb && cb(null, defaultUrl);\n                    return defaultUrl;\n                }\n                else {\n                    var url = (linkResolver && linkResolver(document)) || document.url || defaultUrl;\n                    cb && cb(null, url);\n                    return url;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(defaultUrl);\n        }\n    };\n    return { token: token, documentId: documentId, resolve: resolve };\n}\n\nvar PREVIEW_COOKIE = 'io.prismic.preview';\nvar EXPERIMENT_COOKIE = 'io.prismic.experiment';\nvar ResolvedApi = /** @class */ (function () {\n    function ResolvedApi(data, httpClient, options) {\n        this.data = data;\n        this.masterRef = data.refs.filter(function (ref) { return ref.isMasterRef; })[0];\n        this.experiments = new Experiments(data.experiments);\n        this.bookmarks = data.bookmarks;\n        this.httpClient = httpClient;\n        this.options = options;\n        this.refs = data.refs;\n        this.tags = data.tags;\n        this.types = data.types;\n        this.languages = data.languages;\n    }\n    /**\n     * Returns a useable form from its id, as described in the RESTful description of the API.\n     * For instance: api.form(\"everything\") works on every repository (as \"everything\" exists by default)\n     * You can then chain the calls: api.form(\"everything\").query('[[:d = at(document.id, \"UkL0gMuvzYUANCpf\")]]').ref(ref).submit()\n     */\n    ResolvedApi.prototype.form = function (formId) {\n        var form = this.data.forms[formId];\n        if (form) {\n            return new SearchForm(form, this.httpClient);\n        }\n        return null;\n    };\n    ResolvedApi.prototype.everything = function () {\n        var f = this.form('everything');\n        if (!f)\n            throw new Error('Missing everything form');\n        return f;\n    };\n    /**\n     * The ID of the master ref on this prismic.io API.\n     * Do not use like this: searchForm.ref(api.master()).\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n     */\n    ResolvedApi.prototype.master = function () {\n        return this.masterRef.ref;\n    };\n    /**\n     * Returns the ref ID for a given ref's label.\n     * Do not use like this: searchForm.ref(api.ref(\"Future release label\")).\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n     */\n    ResolvedApi.prototype.ref = function (label) {\n        var ref = this.data.refs.filter(function (ref) { return ref.label === label; })[0];\n        return ref ? ref.ref : null;\n    };\n    ResolvedApi.prototype.currentExperiment = function () {\n        return this.experiments.current();\n    };\n    /**\n     * Query the repository\n     */\n    ResolvedApi.prototype.query = function (q, optionsOrCallback, cb) {\n        if (cb === void 0) { cb = function () { }; }\n        var _a = typeof optionsOrCallback === 'function'\n            ? { options: {}, callback: optionsOrCallback }\n            : { options: optionsOrCallback || {}, callback: cb }, options = _a.options, callback = _a.callback;\n        var form = this.everything();\n        for (var key in options) {\n            form = form.set(key, options[key]);\n        }\n        if (!options.ref) {\n            // Look in cookies if we have a ref (preview or experiment)\n            var cookieString = '';\n            if (this.options.req) { // NodeJS\n                cookieString = this.options.req.headers['cookie'] || '';\n            }\n            else if (typeof window !== 'undefined' && window.document) { // Browser\n                cookieString = window.document.cookie || '';\n            }\n            var cookies = Cookies.parse(cookieString);\n            var previewRef = cookies[PREVIEW_COOKIE];\n            var experimentRef = this.experiments.refFromCookie(cookies[EXPERIMENT_COOKIE]);\n            form = form.ref(previewRef || experimentRef || this.masterRef.ref);\n        }\n        if (q) {\n            form.query(q);\n        }\n        return form.submit(callback);\n    };\n    /**\n     * Retrieve the document returned by the given query\n     * @param {string|array|Predicate} the query\n     * @param {object} additional parameters. In NodeJS, pass the request as 'req'.\n     * @param {function} callback(err, doc)\n     */\n    ResolvedApi.prototype.queryFirst = function (q, optionsOrCallback, cb) {\n        var _a = typeof optionsOrCallback === 'function'\n            ? { options: {}, callback: optionsOrCallback }\n            : { options: optionsOrCallback || {}, callback: cb || (function () { }) }, options = _a.options, callback = _a.callback;\n        options.page = 1;\n        options.pageSize = 1;\n        return this.query(q, options).then(function (response) {\n            var document = response && response.results && response.results[0];\n            callback(null, document);\n            return document;\n        }).catch(function (error) {\n            callback(error);\n            throw error;\n        });\n    };\n    /**\n     * Retrieve the document with the given id\n     */\n    ResolvedApi.prototype.getByID = function (id, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (!options.lang)\n            options.lang = '*';\n        return this.queryFirst(Predicates.at('document.id', id), options, cb);\n    };\n    /**\n     * Retrieve multiple documents from an array of id\n     */\n    ResolvedApi.prototype.getByIDs = function (ids, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (!options.lang)\n            options.lang = '*';\n        return this.query(Predicates.in('document.id', ids), options, cb);\n    };\n    /**\n     * Retrieve the document with the given uid\n     */\n    ResolvedApi.prototype.getByUID = function (type, uid, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (options.lang === '*')\n            throw new Error(\"FORBIDDEN. You can't use getByUID with *, use the predicates instead.\");\n        if (!options.page)\n            options.page = 1;\n        return this.queryFirst(Predicates.at(\"my.\" + type + \".uid\", uid), options, cb);\n    };\n    /**\n     * Retrieve the singleton document with the given type\n     */\n    ResolvedApi.prototype.getSingle = function (type, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        return this.queryFirst(Predicates.at('document.type', type), options, cb);\n    };\n    /**\n     * Retrieve the document with the given bookmark\n     */\n    ResolvedApi.prototype.getBookmark = function (bookmark, maybeOptions, cb) {\n        var id = this.data.bookmarks[bookmark];\n        if (id) {\n            return this.getByID(id, maybeOptions, cb);\n        }\n        else {\n            return Promise.reject('Error retrieving bookmarked id');\n        }\n    };\n    ResolvedApi.prototype.getPreviewResolver = function (token, documentId) {\n        return createPreviewResolver(token, documentId, this.getByID.bind(this));\n    };\n    ResolvedApi.prototype.previewSession = function (token, linkResolver, defaultUrl, cb) {\n        var _this = this;\n        console.warn('previewSession function is deprecated in favor of getPreviewResolver function.');\n        return new Promise(function (resolve, reject) {\n            _this.httpClient.request(token, function (e, result) {\n                if (e) {\n                    cb && cb(e);\n                    reject(e);\n                }\n                else if (result) {\n                    if (!result.mainDocument) {\n                        cb && cb(null, defaultUrl);\n                        resolve(defaultUrl);\n                    }\n                    else {\n                        return _this.getByID(result.mainDocument, { ref: token }).then(function (document) {\n                            if (!document) {\n                                cb && cb(null, defaultUrl);\n                                resolve(defaultUrl);\n                            }\n                            else {\n                                var url = (linkResolver && linkResolver(document)) || document.url || defaultUrl;\n                                cb && cb(null, url);\n                                resolve(url);\n                            }\n                        }).catch(reject);\n                    }\n                }\n            });\n        });\n    };\n    return ResolvedApi;\n}());\n\n/* eslint-disable */\n/**\n* A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\n* recently used items while discarding least recently used items when its limit\n* is reached.\n*\n* Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\n* Typescript-ified by Oleksandr Nikitin <https://tvori.info>\n*\n* Illustration of the design:\n*\n*       entry             entry             entry             entry\n*       ______            ______            ______            ______\n*      | head |.newer => |      |.newer => |      |.newer => | tail |\n*      |  A   |          |  B   |          |  C   |          |  D   |\n*      |______| <= older.|______| <= older.|______| <= older.|______|\n*\n*  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\n*/\nfunction MakeLRUCache(limit) {\n    return new LRUCache(limit);\n}\nfunction LRUCache(limit) {\n    // Current size of the cache. (Read-only).\n    this.size = 0;\n    // Maximum number of items this cache can hold.\n    this.limit = limit;\n    this._keymap = {};\n}\n/**\n * Put <value> into the cache associated with <key>. Returns the entry which was\n * removed to make room for the new entry. Otherwise undefined is returned\n * (i.e. if there was enough room already).\n */\nLRUCache.prototype.put = function (key, value) {\n    var entry = { key: key, value: value };\n    // Note: No protection agains replacing, and thus orphan entries. By design.\n    this._keymap[key] = entry;\n    if (this.tail) {\n        // link previous tail to the new tail (entry)\n        this.tail.newer = entry;\n        entry.older = this.tail;\n    }\n    else {\n        // we're first in -- yay\n        this.head = entry;\n    }\n    // add new entry to the end of the linked list -- it's now the freshest entry.\n    this.tail = entry;\n    if (this.size === this.limit) {\n        // we hit the limit -- remove the head\n        return this.shift();\n    }\n    else {\n        // increase the size counter\n        this.size++;\n    }\n};\n/**\n * Purge the least recently used (oldest) entry from the cache. Returns the\n * removed entry or undefined if the cache was empty.\n *\n * If you need to perform any form of finalization of purged items, this is a\n * good place to do it. Simply override/replace this function:\n *\n *   var c = new LRUCache(123);\n *   c.shift = function() {\n *     var entry = LRUCache.prototype.shift.call(this);\n *     doSomethingWith(entry);\n *     return entry;\n *   }\n */\nLRUCache.prototype.shift = function () {\n    // todo: handle special case when limit == 1\n    var entry = this.head;\n    if (entry) {\n        if (this.head.newer) {\n            this.head = this.head.newer;\n            this.head.older = undefined;\n        }\n        else {\n            this.head = undefined;\n        }\n        // Remove last strong reference to <entry> and remove links from the purged\n        // entry being returned:\n        entry.newer = entry.older = undefined;\n        // delete is slow, but we need to do this to avoid uncontrollable growth:\n        delete this._keymap[entry.key];\n    }\n    console.log('purging ', entry.key);\n    return entry;\n};\n/**\n * Get and register recent use of <key>. Returns the value associated with <key>\n * or undefined if not in cache.\n */\nLRUCache.prototype.get = function (key, returnEntry) {\n    // First, find our cache entry\n    var entry = this._keymap[key];\n    if (entry === undefined)\n        return; // Not cached. Sorry.\n    // As <key> was found in the cache, register it as being requested recently\n    if (entry === this.tail) {\n        // Already the most recently used entry, so no need to update the list\n        return returnEntry ? entry : entry.value;\n    }\n    // HEAD--------------TAIL\n    //   <.older   .newer>\n    //  <--- add direction --\n    //   A  B  C  <D>  E\n    if (entry.newer) {\n        if (entry === this.head)\n            this.head = entry.newer;\n        entry.newer.older = entry.older; // C <-- E.\n    }\n    if (entry.older)\n        entry.older.newer = entry.newer; // C. --> E\n    entry.newer = undefined; // D --x\n    entry.older = this.tail; // D. --> E\n    if (this.tail)\n        this.tail.newer = entry; // E. <-- D\n    this.tail = entry;\n    return returnEntry ? entry : entry.value;\n};\n// ----------------------------------------------------------------------------\n// Following code is optional and can be removed without breaking the core\n// functionality.\n/**\n * Check if <key> is in the cache without registering recent use. Feasible if\n * you do not want to chage the state of the cache, but only \"peek\" at it.\n * Returns the entry associated with <key> if found, or undefined if not found.\n */\nLRUCache.prototype.find = function (key) {\n    return this._keymap[key];\n};\n/**\n * Update the value of entry with <key>. Returns the old value, or undefined if\n * entry was not in the cache.\n */\nLRUCache.prototype.set = function (key, value) {\n    var oldvalue;\n    var entry = this.get(key, true);\n    if (entry) {\n        oldvalue = entry.value;\n        entry.value = value;\n    }\n    else {\n        oldvalue = this.put(key, value);\n        if (oldvalue)\n            oldvalue = oldvalue.value;\n    }\n    return oldvalue;\n};\n/**\n * Remove entry <key> from cache and return its value. Returns undefined if not\n * found.\n */\nLRUCache.prototype.remove = function (key) {\n    var entry = this._keymap[key];\n    if (!entry)\n        return;\n    delete this._keymap[entry.key]; // need to do delete unfortunately\n    if (entry.newer && entry.older) {\n        // relink the older entry with the newer entry\n        entry.older.newer = entry.newer;\n        entry.newer.older = entry.older;\n    }\n    else if (entry.newer) {\n        // remove the link to us\n        entry.newer.older = undefined;\n        // link the newer entry to head\n        this.head = entry.newer;\n    }\n    else if (entry.older) {\n        // remove the link to us\n        entry.older.newer = undefined;\n        // link the newer entry to head\n        this.tail = entry.older;\n    }\n    else { // if(entry.older === undefined && entry.newer === undefined) {\n        this.head = this.tail = undefined;\n    }\n    this.size--;\n    return entry.value;\n};\n/** Removes all entries */\nLRUCache.prototype.removeAll = function () {\n    // This should be safe, as we never expose strong refrences to the outside\n    this.head = this.tail = undefined;\n    this.size = 0;\n    this._keymap = {};\n};\n/**\n * Return an array containing all keys of entries stored in the cache object, in\n * arbitrary order.\n */\nif (typeof Object.keys === 'function') {\n    LRUCache.prototype.keys = function () { return Object.keys(this._keymap); };\n}\nelse {\n    LRUCache.prototype.keys = function () {\n        var keys = [];\n        for (var k in this._keymap)\n            keys.push(k);\n        return keys;\n    };\n}\n/**\n * Call `fun` for each entry. Starting with the newest entry if `desc` is a true\n * value, otherwise starts with the oldest (head) enrty and moves towards the\n * tail.\n *\n * `fun` is called with 3 arguments in the context `context`:\n *   `fun.call(context, Object key, Object value, LRUCache self)`\n */\nLRUCache.prototype.forEach = function (fun, context, desc) {\n    var entry;\n    if (context === true) {\n        desc = true;\n        context = undefined;\n    }\n    else if (typeof context !== 'object')\n        context = this;\n    if (desc) {\n        entry = this.tail;\n        while (entry) {\n            fun.call(context, entry.key, entry.value, this);\n            entry = entry.older;\n        }\n    }\n    else {\n        entry = this.head;\n        while (entry) {\n            fun.call(context, entry.key, entry.value, this);\n            entry = entry.newer;\n        }\n    }\n};\n/** Returns a JSON (array) representation */\n//LRUCache.prototype.toJSON = function () {\n//    var s: IEntry[] = [], entry = this.head;\n//    while (entry) {\n//        s.push({ key: entry.key.toJSON(), value: entry.value.toJSON() });\n//        entry = entry.newer;\n//    }\n//    return s;\n//};\n/** Returns a String representation */\nLRUCache.prototype.toString = function () {\n    var s = '', entry = this.head;\n    while (entry) {\n        s += String(entry.key) + ':' + entry.value;\n        entry = entry.newer;\n        if (entry)\n            s += ' < ';\n    }\n    return s;\n};\n// Export ourselves\n//if (typeof this === 'object') this.LRUCache = LRUCache;\n\nvar DefaultApiCache = /** @class */ (function () {\n    function DefaultApiCache(limit) {\n        if (limit === void 0) { limit = 1000; }\n        this.lru = MakeLRUCache(limit);\n    }\n    DefaultApiCache.prototype.isExpired = function (key) {\n        var value = this.lru.get(key, false);\n        if (value) {\n            return value.expiredIn !== 0 && value.expiredIn < Date.now();\n        }\n        else {\n            return false;\n        }\n    };\n    DefaultApiCache.prototype.get = function (key, cb) {\n        var value = this.lru.get(key, false);\n        if (value && !this.isExpired(key)) {\n            cb(null, value.data);\n        }\n        else {\n            cb && cb(null);\n        }\n    };\n    DefaultApiCache.prototype.set = function (key, value, ttl, cb) {\n        this.lru.remove(key);\n        this.lru.put(key, {\n            data: value,\n            expiredIn: ttl ? (Date.now() + (ttl * 1000)) : 0,\n        });\n        cb && cb(null);\n    };\n    DefaultApiCache.prototype.remove = function (key, cb) {\n        this.lru.remove(key);\n        cb && cb(null);\n    };\n    DefaultApiCache.prototype.clear = function (cb) {\n        this.lru.removeAll();\n        cb && cb(null);\n    };\n    return DefaultApiCache;\n}());\n\nfunction fetchRequest(url, options, callback) {\n    var fetchOptions = {\n        headers: {\n            Accept: 'application/json',\n        },\n    };\n    if (options && options.proxyAgent) {\n        fetchOptions.agent = options.proxyAgent;\n    }\n    // can't use number because of NodeJS globals included\n    var timeoutId;\n    var fetchPromise = cross_fetch__WEBPACK_IMPORTED_MODULE_0__(url, fetchOptions);\n    var promise = options.timeoutInMs ? Promise.race([\n        fetchPromise,\n        new Promise(function (_, reject) {\n            timeoutId = setTimeout(function () { return reject(new Error(url + \" response timeout\")); }, options.timeoutInMs);\n        })\n    ]) : fetchPromise;\n    promise.then(function (resp) {\n        clearTimeout(timeoutId);\n        if (~~(resp.status / 100 !== 2)) {\n            /**\n             * @description\n             * drain the resp before throwing an error to prevent memory leaks\n             * @link https://github.com/bitinn/node-fetch/issues/83\n             */\n            return resp.text().then(function () {\n                var e = new Error(\"Unexpected status code [\" + resp.status + \"] on URL \" + url);\n                e.status = resp.status;\n                throw e;\n            });\n        }\n        return resp.json().then(function (result) {\n            var cacheControl = resp.headers.get('cache-control');\n            var parsedCacheControl = cacheControl ? /max-age=(\\d+)/.exec(cacheControl) : null;\n            var ttl = parsedCacheControl ? parseInt(parsedCacheControl[1], 10) : undefined;\n            callback(null, result, resp, ttl);\n        });\n    }).catch(function (err) {\n        clearTimeout(timeoutId);\n        callback(err);\n    });\n}\nvar DefaultRequestHandler = /** @class */ (function () {\n    function DefaultRequestHandler(options) {\n        this.options = options || {};\n    }\n    DefaultRequestHandler.prototype.request = function (url, callback) {\n        fetchRequest(url, this.options, callback);\n    };\n    return DefaultRequestHandler;\n}());\n\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(requestHandler, cache, proxyAgent, timeoutInMs) {\n        this.requestHandler = requestHandler || new DefaultRequestHandler({ proxyAgent: proxyAgent, timeoutInMs: timeoutInMs });\n        this.cache = cache || new DefaultApiCache();\n    }\n    HttpClient.prototype.request = function (url, callback) {\n        this.requestHandler.request(url, function (err, result, xhr, ttl) {\n            if (err) {\n                callback && callback(err, null, xhr, ttl);\n            }\n            else if (result) {\n                callback && callback(null, result, xhr, ttl);\n            }\n        });\n    };\n    /**\n     * Fetch a URL corresponding to a query, and parse the response as a Response object\n     */\n    HttpClient.prototype.cachedRequest = function (url, maybeOptions) {\n        var _this = this;\n        var options = maybeOptions || {};\n        var run = function (cb) {\n            var cacheKey = options.cacheKey || url;\n            _this.cache.get(cacheKey, function (cacheGetError, cacheGetValue) {\n                if (cacheGetError || cacheGetValue) {\n                    cb(cacheGetError, cacheGetValue);\n                }\n                else {\n                    _this.request(url, function (fetchError, fetchValue, _, ttlReq) {\n                        if (fetchError) {\n                            cb(fetchError, null);\n                        }\n                        else {\n                            var ttl = ttlReq || options.ttl;\n                            if (ttl) {\n                                _this.cache.set(cacheKey, fetchValue, ttl, cb);\n                            }\n                            cb(null, fetchValue);\n                        }\n                    });\n                }\n            });\n        };\n        return new Promise(function (resolve, reject) {\n            run(function (err, value) {\n                if (err)\n                    reject(err);\n                if (value)\n                    resolve(value);\n            });\n        });\n    };\n    return HttpClient;\n}());\n\nfunction separator(url) {\n    return url.indexOf('?') > -1 ? '&' : '?';\n}\nvar Api = /** @class */ (function () {\n    function Api(url, options) {\n        this.options = options || {};\n        this.url = url;\n        if (this.options.accessToken) {\n            var accessTokenParam = \"access_token=\" + this.options.accessToken;\n            this.url += separator(url) + accessTokenParam;\n        }\n        if (this.options.routes) {\n            this.url += separator(url) + (\"routes=\" + encodeURIComponent(JSON.stringify(this.options.routes)));\n        }\n        this.apiDataTTL = this.options.apiDataTTL || 5;\n        this.httpClient = new HttpClient(this.options.requestHandler, this.options.apiCache, this.options.proxyAgent, this.options.timeoutInMs);\n    }\n    /**\n     * Fetches data used to construct the api client, from cache if it's\n     * present, otherwise from calling the prismic api endpoint (which is\n     * then cached).\n     */\n    Api.prototype.get = function (cb) {\n        var _this = this;\n        return this.httpClient.cachedRequest(this.url, { ttl: this.apiDataTTL }).then(function (data) {\n            var resolvedApi = new ResolvedApi(data, _this.httpClient, _this.options);\n            cb && cb(null, resolvedApi);\n            return resolvedApi;\n        }).catch(function (error) {\n            cb && cb(error);\n            throw error;\n        });\n    };\n    return Api;\n}());\n\nvar DefaultClient = /** @class */ (function () {\n    function DefaultClient(url, options) {\n        this.api = new Api(url, options);\n    }\n    DefaultClient.prototype.getApi = function () {\n        return this.api.get();\n    };\n    DefaultClient.prototype.everything = function () {\n        return this.form('everything');\n    };\n    DefaultClient.prototype.form = function (formId) {\n        return new LazySearchForm(formId, this.api);\n    };\n    DefaultClient.prototype.query = function (q, optionsOrCallback, cb) {\n        return this.getApi().then(function (api) { return api.query(q, optionsOrCallback, cb); });\n    };\n    DefaultClient.prototype.queryFirst = function (q, optionsOrCallback, cb) {\n        return this.getApi().then(function (api) { return api.queryFirst(q, optionsOrCallback, cb); });\n    };\n    DefaultClient.prototype.getByID = function (id, options, cb) {\n        return this.getApi().then(function (api) { return api.getByID(id, options, cb); });\n    };\n    DefaultClient.prototype.getByIDs = function (ids, options, cb) {\n        return this.getApi().then(function (api) { return api.getByIDs(ids, options, cb); });\n    };\n    DefaultClient.prototype.getByUID = function (type, uid, options, cb) {\n        return this.getApi().then(function (api) { return api.getByUID(type, uid, options, cb); });\n    };\n    DefaultClient.prototype.getSingle = function (type, options, cb) {\n        return this.getApi().then(function (api) { return api.getSingle(type, options, cb); });\n    };\n    DefaultClient.prototype.getBookmark = function (bookmark, options, cb) {\n        return this.getApi().then(function (api) { return api.getBookmark(bookmark, options, cb); });\n    };\n    DefaultClient.prototype.previewSession = function (token, linkResolver, defaultUrl, cb) {\n        return this.getApi().then(function (api) { return api.previewSession(token, linkResolver, defaultUrl, cb); });\n    };\n    DefaultClient.prototype.getPreviewResolver = function (token, documentId) {\n        var _this = this;\n        var getDocById = function (documentId, maybeOptions) { return _this.getApi().then(function (api) {\n            return api.getByID(documentId, maybeOptions);\n        }); };\n        return createPreviewResolver(token, documentId, getDocById);\n    };\n    DefaultClient.getApi = function (url, options) {\n        var api = new Api(url, options);\n        return api.get();\n    };\n    return DefaultClient;\n}());\n\nvar index = {\n    experimentCookie: EXPERIMENT_COOKIE,\n    previewCookie: PREVIEW_COOKIE,\n    Predicates: Predicates,\n    Experiments: Experiments,\n    Api: Api,\n    client: client,\n    getApi: getApi,\n    api: api,\n};\nfunction client(url, options) {\n    return new DefaultClient(url, options);\n}\nfunction getApi(url, options) {\n    return DefaultClient.getApi(url, options);\n}\nfunction api(url, options) {\n    return getApi(url, options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceMappingURL=prismic-javascript.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prismic-javascript/esm/prismic-javascript.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);