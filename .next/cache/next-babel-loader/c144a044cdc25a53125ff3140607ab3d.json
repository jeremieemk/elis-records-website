{"ast":null,"code":"var _jsxFileName = \"/Users/jeremie/web/33_elis/components/AudioPlayer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction AudioPlayer() {\n  const {\n    0: progression,\n    1: setProgression\n  } = useState(0);\n  const {\n    0: playingStatus,\n    1: setPlayingStatus\n  } = useState(false);\n  const audio = useRef();\n\n  const updateProgress = () => {\n    setProgression(audio.current.currentTime / audio.current.duration * 100);\n  };\n\n  const handlePlayButtonClick = () => {\n    setPlayingStatus(!playingStatus);\n  };\n\n  useEffect(() => {\n    if (playingStatus) {\n      audio.current.play();\n    } else {\n      audio.current.pause();\n    }\n  }, [playingStatus]);\n  return __jsx(\"div\", {\n    className: \"audio-player-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(PlayButton, {\n    handlePlayButtonClick: handlePlayButtonClick,\n    playingStatus: playingStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), __jsx(ProgressBar, {\n    audio: audio.current,\n    progression: progression,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), __jsx(\"audio\", {\n    ref: audio,\n    onTimeUpdate: updateProgress,\n    src: \"/music/0.mp3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), style);\n}\n\nconst style = __jsx(\"style\", {\n  jsx: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, `\n    .audio-player-container {\n      display: flex;\n      width: 100%;\n      height: 1.5rem;\n    }\n  `);\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/jeremie/web/33_elis/components/AudioPlayer.js"],"names":["useState","useRef","useEffect","PlayButton","ProgressBar","AudioPlayer","progression","setProgression","playingStatus","setPlayingStatus","audio","updateProgress","current","currentTime","duration","handlePlayButtonClick","play","pause","style"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,WAAT,GAAuB;AACrB,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCP,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAACQ,aAAD;AAAA,OAAgBC;AAAhB,MAAoCT,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAMU,KAAK,GAAGT,MAAM,EAApB;;AACA,QAAMU,cAAc,GAAG,MAAM;AAC3BJ,IAAAA,cAAc,CAAEG,KAAK,CAACE,OAAN,CAAcC,WAAd,GAA4BH,KAAK,CAACE,OAAN,CAAcE,QAA3C,GAAuD,GAAxD,CAAd;AACD,GAFD;;AAGA,QAAMC,qBAAqB,GAAG,MAAM;AAClCN,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,GAFD;;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,aAAJ,EAAmB;AACjBE,MAAAA,KAAK,CAACE,OAAN,CAAcI,IAAd;AACD,KAFD,MAEO;AACLN,MAAAA,KAAK,CAACE,OAAN,CAAcK,KAAd;AACD;AACF,GANQ,EAMN,CAACT,aAAD,CANM,CAAT;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,qBAAqB,EAAEO,qBADzB;AAEE,IAAA,aAAa,EAAEP,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEE,KAAK,CAACE,OAA1B;AAAmC,IAAA,WAAW,EAAEN,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAO,IAAA,GAAG,EAAEI,KAAZ;AAAmB,IAAA,YAAY,EAAEC,cAAjC;AAAiD,IAAA,GAAG,EAAE,cAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOGO,KAPH,CADF;AAWD;;AAED,MAAMA,KAAK,GACT;AAAO,EAAA,GAAG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAa;;;;;;GAAb,CADF;;AAUA,eAAeb,WAAf","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction AudioPlayer() {\n  const [progression, setProgression] = useState(0);\n  const [playingStatus, setPlayingStatus] = useState(false);\n  const audio = useRef();\n  const updateProgress = () => {\n    setProgression((audio.current.currentTime / audio.current.duration) * 100);\n  };\n  const handlePlayButtonClick = () => {\n    setPlayingStatus(!playingStatus);\n  };\n\n  useEffect(() => {\n    if (playingStatus) {\n      audio.current.play();\n    } else {\n      audio.current.pause();\n    }\n  }, [playingStatus]);\n\n  return (\n    <div className=\"audio-player-container\">\n      <PlayButton\n        handlePlayButtonClick={handlePlayButtonClick}\n        playingStatus={playingStatus}\n      />\n      <ProgressBar audio={audio.current} progression={progression} />\n      <audio ref={audio} onTimeUpdate={updateProgress} src={\"/music/0.mp3\"} />\n      {style}\n    </div>\n  );\n}\n\nconst style = (\n  <style jsx>{`\n    .audio-player-container {\n      display: flex;\n      width: 100%;\n      height: 1.5rem;\n    }\n  `}</style>\n);\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}