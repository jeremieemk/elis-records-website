{"ast":null,"code":"var _jsxFileName = \"/Users/jeremie/web/33_elis/components/AudioPlayer.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\nimport VolumeSlider from \"./VolumeSlider\";\n\nfunction AudioPlayer(props) {\n  const {\n    0: progression,\n    1: setProgression\n  } = useState(0);\n  const audio = useRef();\n\n  const updateProgress = () => {\n    setProgression(audio.current.currentTime / audio.current.duration * 100);\n  }; // allows changing track or rewinding when clicking on the tracklist\n\n\n  return __jsx(\"div\", {\n    className: \"jsx-1775785678\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"jsx-1775785678\" + \" \" + \"audio-player-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(PlayButton, {\n    handlePlayButtonClick: props.handlePlayButtonClick,\n    playingStatus: props.playingStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), __jsx(ProgressBar, {\n    audio: audio.current,\n    progression: progression,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), __jsx(\"audio\", {\n    ref: audio,\n    onTimeUpdate: updateProgress,\n    src: props.track.url,\n    className: \"jsx-1775785678\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), __jsx(VolumeSlider, {\n    audio: audio.current,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), __jsx(_JSXStyle, {\n    id: \"1775785678\",\n    __self: this\n  }, \".audio-player-container.jsx-1775785678{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;height:2rem;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWllL3dlYi8zM19lbGlzL2NvbXBvbmVudHMvQXVkaW9QbGF5ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEJrQixBQUd3QiwwRUFDRixXQUNDLFlBQ2QiLCJmaWxlIjoiL1VzZXJzL2plcmVtaWUvd2ViLzMzX2VsaXMvY29tcG9uZW50cy9BdWRpb1BsYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFBsYXlCdXR0b24gZnJvbSBcIi4vUGxheUJ1dHRvblwiO1xuaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gXCIuL1Byb2dyZXNzQmFyXCI7XG5pbXBvcnQgVm9sdW1lU2xpZGVyIGZyb20gXCIuL1ZvbHVtZVNsaWRlclwiO1xuXG5mdW5jdGlvbiBBdWRpb1BsYXllcihwcm9wcykge1xuICBjb25zdCBbcHJvZ3Jlc3Npb24sIHNldFByb2dyZXNzaW9uXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBhdWRpbyA9IHVzZVJlZigpO1xuICBjb25zdCB1cGRhdGVQcm9ncmVzcyA9ICgpID0+IHtcbiAgICBzZXRQcm9ncmVzc2lvbigoYXVkaW8uY3VycmVudC5jdXJyZW50VGltZSAvIGF1ZGlvLmN1cnJlbnQuZHVyYXRpb24pICogMTAwKTtcbiAgfTtcblxuICAvLyBhbGxvd3MgY2hhbmdpbmcgdHJhY2sgb3IgcmV3aW5kaW5nIHdoZW4gY2xpY2tpbmcgb24gdGhlIHRyYWNrbGlzdFxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXVkaW8tcGxheWVyLWNvbnRhaW5lclwiPlxuICAgICAgICA8UGxheUJ1dHRvblxuICAgICAgICAgIGhhbmRsZVBsYXlCdXR0b25DbGljaz17cHJvcHMuaGFuZGxlUGxheUJ1dHRvbkNsaWNrfVxuICAgICAgICAgIHBsYXlpbmdTdGF0dXM9e3Byb3BzLnBsYXlpbmdTdGF0dXN9XG4gICAgICAgIC8+XG4gICAgICAgIDxQcm9ncmVzc0JhciBhdWRpbz17YXVkaW8uY3VycmVudH0gcHJvZ3Jlc3Npb249e3Byb2dyZXNzaW9ufSAvPlxuXG4gICAgICAgIDxhdWRpb1xuICAgICAgICAgIHJlZj17YXVkaW99XG4gICAgICAgICAgb25UaW1lVXBkYXRlPXt1cGRhdGVQcm9ncmVzc31cbiAgICAgICAgICBzcmM9e3Byb3BzLnRyYWNrLnVybH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPFZvbHVtZVNsaWRlciBhdWRpbz17YXVkaW8uY3VycmVudH0gLz5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmF1ZGlvLXBsYXllci1jb250YWluZXIge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAycmVtO1xuICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXVkaW9QbGF5ZXI7XG4iXX0= */\\n/*@ sourceURL=/Users/jeremie/web/33_elis/components/AudioPlayer.js */\"));\n}\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/jeremie/web/33_elis/components/AudioPlayer.js"],"names":["useState","useRef","useEffect","PlayButton","ProgressBar","VolumeSlider","AudioPlayer","props","progression","setProgression","audio","updateProgress","current","currentTime","duration","handlePlayButtonClick","playingStatus","track","url"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCT,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMU,KAAK,GAAGT,MAAM,EAApB;;AACA,QAAMU,cAAc,GAAG,MAAM;AAC3BF,IAAAA,cAAc,CAAEC,KAAK,CAACE,OAAN,CAAcC,WAAd,GAA4BH,KAAK,CAACE,OAAN,CAAcE,QAA3C,GAAuD,GAAxD,CAAd;AACD,GAFD,CAH0B,CAO1B;;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,wCAAe,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,qBAAqB,EAAEP,KAAK,CAACQ,qBAD/B;AAEE,IAAA,aAAa,EAAER,KAAK,CAACS,aAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEN,KAAK,CAACE,OAA1B;AAAmC,IAAA,WAAW,EAAEJ,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAOE;AACE,IAAA,GAAG,EAAEE,KADP;AAEE,IAAA,YAAY,EAAEC,cAFhB;AAGE,IAAA,GAAG,EAAEJ,KAAK,CAACU,KAAN,CAAYC,GAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAcE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAER,KAAK,CAACE,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF;AAAA;AAAA;AAAA,8nEADF;AA0BD;;AAED,eAAeN,WAAf","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\nimport VolumeSlider from \"./VolumeSlider\";\n\nfunction AudioPlayer(props) {\n  const [progression, setProgression] = useState(0);\n  const audio = useRef();\n  const updateProgress = () => {\n    setProgression((audio.current.currentTime / audio.current.duration) * 100);\n  };\n\n  // allows changing track or rewinding when clicking on the tracklist\n\n  return (\n    <div>\n      <div className=\"audio-player-container\">\n        <PlayButton\n          handlePlayButtonClick={props.handlePlayButtonClick}\n          playingStatus={props.playingStatus}\n        />\n        <ProgressBar audio={audio.current} progression={progression} />\n\n        <audio\n          ref={audio}\n          onTimeUpdate={updateProgress}\n          src={props.track.url}\n        />\n      </div>\n      <VolumeSlider audio={audio.current} />\n      <style jsx>{`\n        .audio-player-container {\n          display: flex;\n          width: 100%;\n          height: 2rem;\n        }\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}