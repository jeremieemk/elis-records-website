{"ast":null,"code":"var _jsxFileName = \"/Users/jeremie/web/33_elis/components/AudioPlayer.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction AudioPlayer() {\n  const {\n    0: progression,\n    1: setProgression\n  } = useState(0); //   useEffect(() => {\n  //\n  //   }, []);\n\n  const {\n    0: playingStatus,\n    1: setPlayingStatus\n  } = useState(false);\n  const {\n    0: audioCurrentTime,\n    1: setAudioCurrentTime\n  } = useState(0);\n  const {\n    0: songLength,\n    1: setSongLength\n  } = useState(0);\n  const audio = useRef(null);\n\n  const updateProgressBar = () => {\n    console.log(audio.current.currentTime);\n    setProgression(audio.current.currentTime / audio.current.duration * 100);\n  };\n\n  const handlePlayButtonClick = () => {\n    setPlayingStatus(!playingStatus);\n  };\n\n  useEffect(() => {\n    setSongLength(audio.current.duration);\n\n    if (playingStatus) {\n      audio.current.play();\n      setInterval(() => setAudioCurrentTime(audio.current.currentTime), 10);\n    } else {\n      audio.current.pause();\n    }\n  }, [playingStatus]);\n  return __jsx(\"div\", {\n    className: \"audio-player-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(PlayButton, {\n    handlePlayButtonClick: handlePlayButtonClick,\n    playingStatus: playingStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(ProgressBar, {\n    audio: audio.current,\n    audioCurrentTime: audioCurrentTime,\n    songLength: songLength,\n    progression: progression,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"audio\", {\n    ref: audio,\n    onTimeUpdate: updateProgressBar,\n    src: \"/music/0.mp3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), style);\n}\n\nconst style = __jsx(\"style\", {\n  jsx: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, ``);\n\nexport default AudioPlayer;","map":{"version":3,"sources":["/Users/jeremie/web/33_elis/components/AudioPlayer.js"],"names":["useState","useRef","useEffect","PlayButton","ProgressBar","AudioPlayer","progression","setProgression","playingStatus","setPlayingStatus","audioCurrentTime","setAudioCurrentTime","songLength","setSongLength","audio","updateProgressBar","console","log","current","currentTime","duration","handlePlayButtonClick","play","setInterval","pause","style"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,WAAT,GAAuB;AACrB,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCP,QAAQ,CAAC,CAAD,CAA9C,CADqB,CAErB;AACA;AACA;;AACA,QAAM;AAAA,OAACQ,aAAD;AAAA,OAAgBC;AAAhB,MAAoCT,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAACU,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CX,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMc,KAAK,GAAGb,MAAM,CAAC,IAAD,CAApB;;AAEA,QAAMc,iBAAiB,GAAG,MAAM;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,OAAN,CAAcC,WAA1B;AACAZ,IAAAA,cAAc,CAAEO,KAAK,CAACI,OAAN,CAAcC,WAAd,GAA4BL,KAAK,CAACI,OAAN,CAAcE,QAA3C,GAAuD,GAAxD,CAAd;AACD,GAHD;;AAIA,QAAMC,qBAAqB,GAAG,MAAM;AAClCZ,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,GAFD;;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,aAAa,CAACC,KAAK,CAACI,OAAN,CAAcE,QAAf,CAAb;;AACA,QAAIZ,aAAJ,EAAmB;AACjBM,MAAAA,KAAK,CAACI,OAAN,CAAcI,IAAd;AACAC,MAAAA,WAAW,CAAC,MAAMZ,mBAAmB,CAACG,KAAK,CAACI,OAAN,CAAcC,WAAf,CAA1B,EAAuD,EAAvD,CAAX;AACD,KAHD,MAGO;AACLL,MAAAA,KAAK,CAACI,OAAN,CAAcM,KAAd;AACD;AACF,GARQ,EAQN,CAAChB,aAAD,CARM,CAAT;AAUA,SACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,qBAAqB,EAAEa,qBADzB;AAEE,IAAA,aAAa,EAAEb,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,WAAD;AACE,IAAA,KAAK,EAAEM,KAAK,CAACI,OADf;AAEE,IAAA,gBAAgB,EAAER,gBAFpB;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAEN,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAWE;AACE,IAAA,GAAG,EAAEQ,KADP;AAEE,IAAA,YAAY,EAAEC,iBAFhB;AAGE,IAAA,GAAG,EAAE,cAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAgBGU,KAhBH,CADF;AAoBD;;AAED,MAAMA,KAAK,GAAG;AAAO,EAAA,GAAG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAa,EAAb,CAAd;;AAEA,eAAepB,WAAf","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport PlayButton from \"./PlayButton\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction AudioPlayer() {\n  const [progression, setProgression] = useState(0);\n  //   useEffect(() => {\n  //\n  //   }, []);\n  const [playingStatus, setPlayingStatus] = useState(false);\n  const [audioCurrentTime, setAudioCurrentTime] = useState(0);\n  const [songLength, setSongLength] = useState(0);\n  const audio = useRef(null);\n\n  const updateProgressBar = () => {\n    console.log(audio.current.currentTime);\n    setProgression((audio.current.currentTime / audio.current.duration) * 100);\n  };\n  const handlePlayButtonClick = () => {\n    setPlayingStatus(!playingStatus);\n  };\n\n  useEffect(() => {\n    setSongLength(audio.current.duration);\n    if (playingStatus) {\n      audio.current.play();\n      setInterval(() => setAudioCurrentTime(audio.current.currentTime), 10);\n    } else {\n      audio.current.pause();\n    }\n  }, [playingStatus]);\n\n  return (\n    <div className=\"audio-player-container\">\n      <PlayButton\n        handlePlayButtonClick={handlePlayButtonClick}\n        playingStatus={playingStatus}\n      />\n      <ProgressBar\n        audio={audio.current}\n        audioCurrentTime={audioCurrentTime}\n        songLength={songLength}\n        progression={progression}\n      />\n      <audio\n        ref={audio}\n        onTimeUpdate={updateProgressBar}\n        src={\"/music/0.mp3\"}\n      />\n      {style}\n    </div>\n  );\n}\n\nconst style = <style jsx>{``}</style>;\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}