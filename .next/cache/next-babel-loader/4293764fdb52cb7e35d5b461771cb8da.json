{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/jeremie/code/elis-records-website/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Prismic from \"prismic-javascript\";\nimport { useEffect, useState } from \"react\";\n\nfunction App(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState(null),\n      releases = _useState[0],\n      setReleasesData = _useState[1];\n\n  var _useState2 = useState(false),\n      dataIsLoaded = _useState2[0],\n      setDataIsLoaded = _useState2[1];\n\n  var apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n  var accessToken = \"\";\n  var Client = Prismic.client(apiEndpoint, {\n    accessToken: accessToken\n  });\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Client.query(Prismic.Predicates.at(\"document.type\", \"release\"), {\n                orderings: \"[my.release.release-date desc]\"\n              }));\n\n            case 2:\n              response = _context.sent;\n\n              if (response) {\n                setReleasesData(response.results);\n                setDataIsLoaded(true);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(Component, {\n    releases: releases,\n    dataIsLoaded: dataIsLoaded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/jeremie/code/elis-records-website/pages/_app.js"],"names":["Prismic","useEffect","useState","App","Component","pageProps","releases","setReleasesData","dataIsLoaded","setDataIsLoaded","apiEndpoint","accessToken","Client","client","fetchData","query","Predicates","at","orderings","response","results"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,GAAT,OAAuC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AAAA,kBACDH,QAAQ,CAAC,IAAD,CADP;AAAA,MAC9BI,QAD8B;AAAA,MACpBC,eADoB;;AAAA,mBAEGL,QAAQ,CAAC,KAAD,CAFX;AAAA,MAE9BM,YAF8B;AAAA,MAEhBC,eAFgB;;AAGrC,MAAMC,WAAW,GAAG,wCAApB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,MAAM,GAAGZ,OAAO,CAACa,MAAR,CAAeH,WAAf,EAA4B;AAAEC,IAAAA,WAAW,EAAXA;AAAF,GAA5B,CAAf;AACAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOF,MAAM,CAACG,KAAP,CACrBf,OAAO,CAACgB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,SAAvC,CADqB,EAErB;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAFqB,CADP;;AAAA;AACVC,cAAAA,QADU;;AAKhB,kBAAIA,QAAJ,EAAc;AACZZ,gBAAAA,eAAe,CAACY,QAAQ,CAACC,OAAV,CAAf;AACAX,gBAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAUAK,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT;AAaA,SAAO,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAER,QAArB;AAA+B,IAAA,YAAY,EAAEE,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,GAAf","sourcesContent":["import Prismic from \"prismic-javascript\";\nimport { useEffect, useState } from \"react\";\n\nfunction App({ Component, pageProps }) {\n  const [releases, setReleasesData] = useState(null);\n  const [dataIsLoaded, setDataIsLoaded] = useState(false);\n  const apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n  const accessToken = \"\";\n  const Client = Prismic.client(apiEndpoint, { accessToken });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(\n        Prismic.Predicates.at(\"document.type\", \"release\"),\n        { orderings: \"[my.release.release-date desc]\" }\n      );\n      if (response) {\n        setReleasesData(response.results);\n        setDataIsLoaded(true);\n      }\n    };\n    fetchData();\n  }, []);\n  return <Component releases={releases} dataIsLoaded={dataIsLoaded} />;\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}