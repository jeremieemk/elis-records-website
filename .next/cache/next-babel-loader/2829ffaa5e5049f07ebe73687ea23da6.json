{"ast":null,"code":"var _jsxFileName = \"/Users/jeremie/web/33_elis/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Prismic from \"prismic-javascript\";\nimport { useEffect, useState } from \"react\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  console.log(\"test\");\n  const {\n    0: releases,\n    1: setReleasesData\n  } = useState(null);\n  const {\n    0: dataIsLoaded,\n    1: setDataIsLoaded\n  } = useState(false);\n  const apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n  const accessToken = \"\";\n  const Client = Prismic.client(apiEndpoint, {\n    accessToken\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(Prismic.Predicates.at(\"document.type\", \"release\"), {\n        orderings: \"[my.release.release-date desc]\"\n      });\n\n      if (response) {\n        setReleasesData(response.results);\n        setDataIsLoaded(true);\n        s;\n      }\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(Component, {\n    releases: releases,\n    dataIsLoaded: dataIsLoaded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  });\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/jeremie/web/33_elis/pages/_app.js"],"names":["Prismic","useEffect","useState","MyApp","Component","pageProps","console","log","releases","setReleasesData","dataIsLoaded","setDataIsLoaded","apiEndpoint","accessToken","Client","client","fetchData","response","query","Predicates","at","orderings","results","s"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA8BP,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMU,WAAW,GAAG,wCAApB;AACA,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,MAAM,GAAGd,OAAO,CAACe,MAAR,CAAeH,WAAf,EAA4B;AAAEC,IAAAA;AAAF,GAA5B,CAAf;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,SAAS,GAAG,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,KAAP,CACrBlB,OAAO,CAACmB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,SAAvC,CADqB,EAErB;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAFqB,CAAvB;;AAIA,UAAIJ,QAAJ,EAAc;AACZR,QAAAA,eAAe,CAACQ,QAAQ,CAACK,OAAV,CAAf;AACAX,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAY,QAAAA,CAAC;AACF;AACF,KAVD;;AAWAP,IAAAA,SAAS;AACV,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAO,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAER,QAArB;AAA+B,IAAA,YAAY,EAAEE,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeP,KAAf","sourcesContent":["import Prismic from \"prismic-javascript\";\nimport { useEffect, useState } from \"react\";\n\nfunction MyApp({ Component, pageProps }) {\n  console.log(\"test\");\n  const [releases, setReleasesData] = useState(null);\n  const [dataIsLoaded, setDataIsLoaded] = useState(false);\n  const apiEndpoint = \"https://elis-records.prismic.io/api/v2\";\n  const accessToken = \"\";\n  const Client = Prismic.client(apiEndpoint, { accessToken });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(\n        Prismic.Predicates.at(\"document.type\", \"release\"),\n        { orderings: \"[my.release.release-date desc]\" }\n      );\n      if (response) {\n        setReleasesData(response.results);\n        setDataIsLoaded(true);\n        s;\n      }\n    };\n    fetchData();\n  }, []);\n  return <Component releases={releases} dataIsLoaded={dataIsLoaded} />;\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}